@page
@model SuperBank.Pages.BankService.TransactionModel
@{
    ViewData["Title"] = "Statement";
}
@using SuperBank.Models;

<style>

    .card {
        border: none;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .card-body {
        padding: 30px;
    }

    h1 {
        font-size: 24px;
    }

    h2 {
        font-size: 18px;
        margin-top: 20px;
    }

    p.lead {
        font-size: 16px;
    }

    p {
        font-size: 14px;
        margin-bottom: 15px;
    }

    .loading-dialog {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    .loading-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .fa-spinner {
        font-size: 48px;
        animation: spin 2s infinite linear;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

<script src="https://kit.fontawesome.com/39a832046e.js" crossorigin="anonymous"></script>


<script>
    window.onpageshow = function (event) {
        if (event.persisted) {
            // Page is shown from the bfcache (back/forward cache)
            // Hide the loading dialog if it's displayed
            const loadingDialog = document.getElementById("loading-dialog");
            if (loadingDialog.style.display === "block") {
                loadingDialog.style.display = "none";
                document.getElementById("detailedStatement").style.opacity = "1";
                errorContainer.innerHTML = null;


            }
        }
    };
</script>


<div id="loading-dialog" class="loading-dialog">
    <div class="loading-content">
        <i class="fas fa-spinner fa-spin"></i>
        <p>Loading...</p>
    </div>
</div>



<div class="container mt-5 mb-5 bg-dark">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <h1 class="text-center text-white mt-3 mb-3">@ViewData["Title"]</h1>
            <div class="card mb-5 text-white bg-white">
                <div class="card-body d-flex flex-row text-center p-1">
                    <div class="col-md-4 border border-white bg-dark">
                        <div class="text-gray mt-2">Account Number:</div>
                        <div class="text-info font-weight-bold mb-2">@Model.UserBankAccount.AccountNumber</div>
                    </div>
                    <div class="col-md-4 border border-white bg-dark">
                        <div class="text-gray mt-2">Available Balance:</div>
                        <div class="text-info font-weight-bold mb-2">$@Model.UserBankAccount.Balance</div>
                    </div>
                    <div class="col-md-4 border border-white bg-dark">
                        <div class="text-gray mt-2">Account Opening Date:</div>
                        <div class="text-info font-weight-bold mb-2">@Model.DateOfCreation</div>
                    </div>
                </div>
            </div>

            <div class="card mb-5 bg-dark">
                <div class="card-body d-flex flex-row justify-content-around text-center p-3">
                    <button id="last10Button" class="btn btn-secondary">Last 10 Transactions</button>
                    <button id="detailedStatementButton" class="btn btn-secondary">Filtered Search</button>
                </div>
            </div>



            <div class="container mt-5 mb-5 bg-dark" id="last10Transactions" style="display: none">
                @foreach (Transaction transaction in Model.TransactionsList)
                {
                    <!-- Display transaction details here -->
                    <div class="card mb-2 col-md-8 mx-auto">
                        <div class="card-body d-flex justify-content-between align-items-center p-2">
                            <div>
                                <div class="text-primary">@transaction.TransactionDate.ToString("MMM d, yyyy")</div>
                                <div>@transaction.TransactionDate.ToShortTimeString()</div>
                            </div>

                            @if (transaction.TransactionType == TransactionType.Deposit)
                            {
                                <div class="text-success">
                                    <span class="h5 font-weight-bold ">$@transaction.TransactionAmount</span>
                                    <span>Cr</span>
                                </div>
                            }
                            else
                            {
                                <div class="text-danger">
                                    <span class="h5 font-weight-bold ">$@transaction.TransactionAmount</span>
                                    <span>Dr</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            <form>
                <div class="container mt-5 mb-5 p-3 bg-light" id="detailedStatement" style="display: none">
                    <!-- Detailed Statement content -->
                    <p class="text-secondary lead">For which period do you need a statement?</p>
                    <div class="d-flex justify-content-around align-center">
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="periodOption" id="lastMonth" value="LastMonth">
                            <label class="form-check-label" for="lastMonth">Last month</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="periodOption" id="last3Months" value="Last3Months">
                            <label class="form-check-label" for="last3Months">Last 3 Months</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="periodOption" id="last6Months" value="Last6Months">
                            <label class="form-check-label" for="last6Months">Last 6 Months</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="periodOption" id="lastYear" value="LastYear">
                            <label class="form-check-label" for="lastYear">Last 1 Year</label>
                        </div>
                    </div>
                    <p class="text-secondary border-bottom mt-2 mb-2"></p>
                    <p class="text-secondary lead mb-1">Or select a custom date of your choice:</p>

                    <div class="mt-0 mb-2 d-flex flex-row justify-content-around align-items-center">
                        <div class="form-row text-center">
                            <div class="col mb-2 px-4">
                                <!-- Adjust the column width as needed -->
                                <div class="form-group">
                                    <label for="startDate">Start</label>
                                    <input type="date" class="form-control" id="startDate" placeholder="">
                                </div>
                            </div>
                            <div class="col">
                                <!-- Adjust the column width as needed -->
                                <div class="form-group">
                                    <label for="endDate">End</label>
                                    <input type="date" class="form-control" id="endDate" placeholder="">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="errorContainer" class="text-center text-danger"></div>

                    <div asp-validation-summary="All" class="text-danger mt-2"></div>

                    <p class="text-secondary border-bottom mt-3"></p>
                    <div>
                        <button type="button" id="advancedbtn" class="text-center mb-2 mt-2">Advanced Search</button>
                    </div>
                    <div id="advanced" style="display: none;">
                        <p class="text-secondary border-bottom">All fields below are optional:</p>
                        <div class="mt-3 d-flex justify-content-around align-items-center">
                            <div class="text-center">
                                <label for="minAmount" class="mb-1">Minimum Amount:</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">$</span>
                                    </div>
                                    <input type="number" class="form-control" id="minAmount" placeholder="Min" min="1">
                                </div>
                            </div>
                            <div class="text-center">
                                <label for="maxAmount" class="mb-1">Maximum Amount:</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">$</span>
                                    </div>
                                    <input type="number" class="form-control" id="maxAmount" placeholder="Max" min="1">
                                </div>
                            </div>
                            <br />
                            <div class="text-center">
                                <label for="type" class="mb-1">Transaction Type:</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span id="arrow-indicator" class="input-group-text px-1">↑↓</span>
                                    </div>
                                    <select id="type" class="form-control">
                                        <option value="">All</option>
                                        <option value="Dr">Dr</option>
                                        <option value="Cr">Cr</option>
                                    </select>

                                </div>
                            </div>
                        </div>
                        <p class="text-secondary border-bottom mt-3 mb-2"></p>
                    </div>
                    <div class="text-center mt-3">
                        <button type="button" id="proceedButton" class="btn btn-primary px-5">Proceed</button>
                    </div>
                </div>
            </form>

        </div>
    </div>
</div>


<script>const startDateInput = document.getElementById("startDate");
    const endDateInput = document.getElementById("endDate");
    const radioButtons = document.querySelectorAll('input[name="periodOption"]');


    startDateInput.addEventListener("click", function () {

        radioButtons.forEach(function (radioButton) {
            radioButton.checked = false;
        });
    });

    endDateInput.addEventListener("click", function () {
        radioButtons.forEach(function (radioButton) {
            radioButton.checked = false;
        });
    });

    radioButtons.forEach(function (radioButton) {
        radioButton.addEventListener("click", function () {
            startDateInput.value = "";
            endDateInput.value = "";
        });
    });</script>












<script>// Get references to the select element and the arrow indicator span
    var select = document.getElementById('type');
    var arrowIndicator = document.getElementById('arrow-indicator');

    // Function to update the arrow indicator based on the select value
    function updateArrowIndicator() {
        var selectValue = select.value;

        if (selectValue === 'Dr') {
            arrowIndicator.textContent = '↑';
        } else if (selectValue === 'Cr') {
            arrowIndicator.textContent = '↓';
        } else {
            arrowIndicator.textContent = '↑↓'; // Default to up arrow for 'All'
        }
    }

    // Listen for changes in the select input and update the arrow accordingly
    select.addEventListener('change', function () {
        updateArrowIndicator();
    });</script>





@section Scripts {
    <script>// Function to show Last 10 Transactions
        function showLast10Transactions() {
            var element = document.getElementById("last10Transactions");


            if (element.style.display !== "none") {
                $("#last10Transactions").hide();
                $("#last10Button").removeClass("btn-primary");
                $("#last10Button").addClass("btn-secondary");

            } else {
                $("#last10Button").removeClass("btn-secondary");
                $("#last10Button").addClass("btn-primary");
                $("#detailedStatementButton").removeClass("btn-primary");
                $("#detailedStatementButton").addClass("btn-secondary");

                // Show Last 10 Transactions content
                $("#last10Transactions").show();
                $("#detailedStatement").hide();
            }

        }

        // Function to show Detailed Statement
        function showDetailedStatement() {
            var element = document.getElementById("detailedStatement");

            if (element.style.display !== "none") {
                $("#detailedStatement").hide();
                $("#detailedStatementButton").removeClass("btn-primary");
                $("#detailedStatementButton").addClass("btn-secondary");

            }
            else {
                $("#detailedStatementButton").removeClass("btn-secondary")
                $("#detailedStatementButton").addClass("btn-primary");
                $("#last10Button").removeClass("btn-primary");
                $("#last10Button").addClass("btn-secondary");

                // Show Detailed Statement content
                $("#detailedStatement").show();
                $("#last10Transactions").hide();
            }

        }

        function advanced() {

            $("#advanced").toggle();
        }

        // Set the initial view
        $(document).ready(function () {
            // Attach click events to the buttons
            $("#last10Button").click(showLast10Transactions);
            $("#detailedStatementButton").click(showDetailedStatement);
            $("#advancedbtn").click(advanced);

        });</script>
}


<script>
    document.getElementById("proceedButton").addEventListener("click", function () {


        const radioButtons = document.querySelectorAll('input[name="periodOption"]');
        const startDateInput = document.getElementById("startDate");
        const endDateInput = document.getElementById("endDate");
        const minAmountInput = document.getElementById("minAmount");
        const maxAmountInput = document.getElementById("maxAmount");
        const typeSelect = document.getElementById("type");

        const errorContainer = document.getElementById("errorContainer");

        // Check if at least one radio button is selected
        let isRadioButtonSelected = false;

        radioButtons.forEach(function (radioButton) {
            if (radioButton.checked) {
                isRadioButtonSelected = true;
            }
        });

        const startDate = startDateInput.value;
        const endDate = endDateInput.value;
        var start = new Date(startDate);
        var end = new Date(endDate);

        // Check if the start date is after the end date
        if (startDate && endDate && start > end) {
            displayError("Start date can't be after the End date.");
            return;
        }

        // Check if either radio buttons or custom dates are selected
        if (!isRadioButtonSelected && (!startDate || !endDate)) {
            displayError("Please select a period or enter a custom date range.");
            return;
        }

        const minAmount = parseFloat(minAmountInput.value);
        const maxAmount = parseFloat(maxAmountInput.value);

        // Check if minimumamount or maximumamount is less than 0 or maxAmount is less than minAmount
        if (minAmount < 0) {
            displayError("Minimum Amount cannot be negative.");
            return;
        } else if (maxAmount < 0) {
            displayError("Maximum Amount cannot be negative.");
            return;
        } else if (maxAmount < minAmount) {
            displayError("Maximum Amount cannot be less than Minimum Amount.");
            return;
        }

        

        const url = '/BankService/DetailedStatement?' +
        'periodOption=' + encodeURIComponent(getSelectedRadioValue(radioButtons)) +
        '&startDate=' + encodeURIComponent(startDateInput.value) +
        '&endDate=' + encodeURIComponent(endDateInput.value) +
        '&minAmount=' + encodeURIComponent(minAmountInput.value) +
        '&maxAmount=' + encodeURIComponent(maxAmountInput.value) +
        '&type=' + encodeURIComponent(typeSelect.value);

        // If no errors, display success message
        displaySuccess("Validation successful. Proceed to the list.",url);


    });

    function displayError(message) {
        const errorContainer = document.getElementById("errorContainer");
        errorContainer.innerHTML = message;
        errorContainer.classList.add("text-danger");
        errorContainer.classList.remove("text-success");
    }

    function displaySuccess(message , url) {
        const errorContainer = document.getElementById("errorContainer");
        errorContainer.innerHTML = message;
        errorContainer.classList.add("text-success");
        errorContainer.classList.remove("text-danger");
        showLoadingDialogAndRedirect(url);
    }

    function getSelectedRadioValue(radioButtons) {
        for (const radioButton of radioButtons) {
            if (radioButton.checked) {
                return radioButton.value;
            }
        }
        return null;
    }

    function showLoadingDialogAndRedirect(url) {
        const loadingDialog = document.getElementById("loading-dialog");
        loadingDialog.style.display = "block";

        document.getElementById("detailedStatement").style.opacity = "0.5";

        setTimeout(function () {
            window.location.href = url;
        }, 3000);
    }</script>
